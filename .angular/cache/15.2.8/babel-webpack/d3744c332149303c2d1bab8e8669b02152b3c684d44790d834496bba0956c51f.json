{"ast":null,"code":"import { io } from 'socket.io-client';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction ChatComponent_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(message_r1);\n  }\n}\nexport class ChatComponent {\n  constructor() {\n    this.messages = [];\n    this.newMessage = '';\n    this.nickname = ''; // Add this property for the user's nickname\n    this.socket = io('http://localhost:8080');\n    this.socket.on('message', data => {\n      this.messages.push(data);\n    });\n    // Retrieve the user's nickname from local storage or login component (modify as needed)\n    this.nickname = localStorage.getItem('nickname') || '';\n  }\n  sendMessage() {\n    if (this.newMessage) {\n      this.socket.emit('message', this.nickname + ': ' + this.newMessage);\n      this.newMessage = '';\n    }\n  }\n}\nChatComponent.ɵfac = function ChatComponent_Factory(t) {\n  return new (t || ChatComponent)();\n};\nChatComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChatComponent,\n  selectors: [[\"app-chat\"]],\n  decls: 11,\n  vars: 3,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [\"name\", \"newMessage\", \"placeholder\", \"Type a message...\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"], [3, \"click\"]],\n  template: function ChatComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Welcome to the Chat\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\")(5, \"ul\");\n      i0.ɵɵtemplate(6, ChatComponent_li_6_Template, 2, 1, \"li\", 0);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\")(8, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function ChatComponent_Template_input_ngModelChange_8_listener($event) {\n        return ctx.newMessage = $event;\n      })(\"keyup.enter\", function ChatComponent_Template_input_keyup_enter_8_listener() {\n        return ctx.sendMessage();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function ChatComponent_Template_button_click_9_listener() {\n        return ctx.sendMessage();\n      });\n      i0.ɵɵtext(10, \"Send\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"Nickname: \", ctx.nickname, \"\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.newMessage);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAQA,EAAE,QAAO,kBAAkB;;;;;;ICI/BC,0BAAqC;IAAAA,YAAa;IAAAA,iBAAK;;;;IAAlBA,eAAa;IAAbA,gCAAa;;;ADItD,OAAM,MAAOC,aAAa;EAMxBC;IAJA,aAAQ,GAAa,EAAE;IACvB,eAAU,GAAW,EAAE;IACvB,aAAQ,GAAW,EAAE,CAAC,CAAC;IAGrB,IAAI,CAACC,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,CAAC;IACzC,IAAI,CAACI,MAAM,CAACC,EAAE,CAAC,SAAS,EAAGC,IAAY,IAAI;MACzC,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACF,IAAI,CAAC;IAC1B,CAAC,CAAC;IAEF;IACA,IAAI,CAACG,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE;EACxD;EAEAC,WAAW;IACT,IAAI,IAAI,CAACC,UAAU,EAAE;MACnB,IAAI,CAACT,MAAM,CAACU,IAAI,CAAC,SAAS,EAAE,IAAI,CAACL,QAAQ,GAAG,IAAI,GAAG,IAAI,CAACI,UAAU,CAAC;MACnE,IAAI,CAACA,UAAU,GAAG,EAAE;;EAExB;;AArBWX,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAa;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCT1BlB,0BAAI;MAAAA,mCAAmB;MAAAA,iBAAK;MAC5BA,yBAAG;MAAAA,YAAwB;MAAAA,iBAAI;MAE/BA,2BAAK;MAEDA,4DAAuD;MACzDA,iBAAK;MAGPA,2BAAK;MACIA;QAAA;MAAA,EAAwB;QAAA,OAAkEmB,iBAAa;MAAA,EAA/E;MAA/BnB,iBAAgH;MAChHA,iCAAgC;MAAxBA;QAAA,OAASmB,iBAAa;MAAA,EAAC;MAACnB,qBAAI;MAAAA,iBAAS;;;MAV5CA,eAAwB;MAAxBA,qDAAwB;MAICA,eAAW;MAAXA,sCAAW;MAK9BA,eAAwB;MAAxBA,wCAAwB","names":["io","i0","ChatComponent","constructor","socket","on","data","messages","push","nickname","localStorage","getItem","sendMessage","newMessage","emit","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\projekt\\chat-app\\src\\app\\chat\\chat.component.ts","C:\\xampp\\htdocs\\projekt\\chat-app\\src\\app\\chat\\chat.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport {io} from 'socket.io-client' \n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.scss']\n})\n\nexport class ChatComponent {\n  private socket: any;\n  messages: string[] = [];\n  newMessage: string = '';\n  nickname: string = ''; // Add this property for the user's nickname\n\n  constructor() {\n    this.socket = io('http://localhost:8080');\n    this.socket.on('message', (data: string) => {\n      this.messages.push(data);\n    });\n\n    // Retrieve the user's nickname from local storage or login component (modify as needed)\n    this.nickname = localStorage.getItem('nickname') || ''; \n  }\n\n  sendMessage() {\n    if (this.newMessage) {\n      this.socket.emit('message', this.nickname + ': ' + this.newMessage);\n      this.newMessage = '';\n    }\n  }\n}","<h2>Welcome to the Chat</h2>\n<p>Nickname: {{ nickname }}</p>\n\n<div>\n  <ul>\n    <li *ngFor=\"let message of messages\">{{ message }}</li>\n  </ul>\n</div>\n\n<div>\n  <input [(ngModel)]=\"newMessage\" name=\"newMessage\" placeholder=\"Type a message...\" (keyup.enter)=\"sendMessage()\">\n  <button (click)=\"sendMessage()\">Send</button>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}